{"version":3,"sources":["components/GameCard.js","components/Wrapper.js","components/Title.js","components/game/game.js","app.js","serviceWorker.js","index.js"],"names":["GameCard","props","react_default","a","createElement","className","alt","name","src","image","id","Wrapper","children","Title","Game","state","friends","componentDidMount","handleChange","components_Wrapper","components_Title","components_GameCard","Component","App","game","Boolean","window","location","hostname","match","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cce7635.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/App.css\";\n\nfunction GameCard(props) {\n    return (\n      <div className=\"card\">\n        <div className=\"img-container\">\n          <img alt={props.name} src={props.image} />\n         \n        </div>\n        <div className=\"content\">\n          <ul>\n            <li>\n              <strong>Name:</strong> {props.name}\n            </li>\n            <li>\n              <strong>ID:</strong> {props.id}\n            </li>\n            <li>\n              <strong>image:</strong> {props.image}\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  export default GameCard;\n  ","import React from \"react\";\nimport \"../styles/App.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"../styles/App.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React, {Component}from \"react\";\nimport friends from \"../friends.json\";\nimport GameCard from '../GameCard.js'\nimport Wrapper from \"../Wrapper.js\";\nimport Title from \"../Title.js\";\n\nclass Game extends Component {\n  state = {\n    friends: []\n};\n\ncomponentDidMount= () => {\n    // get all of the items in the friends array\n  };\n\n  handleChange = () => {\n\n  };\n  // LOGIC \n\n  render() {\n    return (\n      <Wrapper>\n        <Title>Dont Click Twice !</Title>\n       \n        <GameCard\n          name={friends[0].name}\n          image={friends[0].image}\n          id={friends[0].id}\n        />\n        <GameCard\n          name={friends[1].name}\n          image={friends[1].image}\n          id={friends[1].id}\n        />\n        <GameCard\n          name={friends[2].name}\n          image={friends[2].image}\n          id={friends[2].id}\n        />\n          <GameCard\n          name={friends[3].name}\n          image={friends[3].image}\n          id={friends[3].id}\n        />\n          <GameCard\n          name={friends[4].name}\n          image={friends[4].image}\n          id={friends[4].id}\n        />\n          <GameCard\n          name={friends[5].name}\n          image={friends[5].image}\n          id={friends[5].id}\n        />\n          <GameCard\n          name={friends[6].name}\n          image={friends[6].image}\n          id={friends[6].id}\n        />\n          <GameCard\n          name={friends[7].name}\n          image={friends[7].image}\n          id={friends[7].id}\n        />\n          <GameCard\n          name={friends[8].name}\n          image={friends[8].image}\n          id={friends[8].id}\n        />\n          <GameCard\n          name={friends[9].name}\n          image={friends[9].image}\n          id={friends[9].id}\n        />\n          <GameCard\n          name={friends[10].name}\n          image={friends[10].image}\n          id={friends[10].id}\n        />\n\n      }\n      </Wrapper>\n  );\n};\n}\n\nexport default Game;\n\n\n","import React, { Component } from 'react';\nimport Game from './components/game/game.js';\n\nclass App extends Component {\n    render () {\n        return (\n            <Game />\n        ) \n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app.js\";\nimport \"./styles/index.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}