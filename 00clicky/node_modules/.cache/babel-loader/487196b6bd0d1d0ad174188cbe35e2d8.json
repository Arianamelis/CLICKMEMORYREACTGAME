{"ast":null,"code":"import _objectSpread from \"/Users/arianamelis 1/Desktop/2019code/CLICKMEMORYREACTGAME/00clicky/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/arianamelis 1/Desktop/2019code/CLICKMEMORYREACTGAME/00clicky/src/components/game/game.js\";\nimport React, { Component } from \"react\";\nimport friends from \"../friends.json\";\nimport GameCard from \"../GameCard.js\";\nimport Wrapper from \"../Wrapper.js\";\nimport ClickItem from \"../ClickItem\";\nimport Title from \"../Title.js\";\nimport Header from \"../Header.js\";\nimport Navbar from \"../Navbar.js\";\n\nclass Game extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      friends: friends,\n      score: 0,\n      topScore: 0\n    };\n\n    this.shuffleData = data => {\n      let i = data.length - 1;\n\n      while (i > 0) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = data[i];\n        data[i] = data[j];\n        data[j] = temp;\n        i--;\n      }\n\n      return data;\n    };\n\n    this.resetData = data => {\n      const resetData = data.map(item => _objectSpread({}, item, {\n        clicked: false\n      }));\n      return this.shuffleData(resetData);\n    };\n\n    this.handleCorrectGuess = newData => {\n      const _this$state = this.state,\n            topScore = _this$state.topScore,\n            score = _this$state.score;\n      const newScore = score + 1;\n      const newTopScore = Math.max(newScore, topScore);\n      this.setState({\n        friends: this.shuffleData(newData),\n        score: newScore,\n        topScore: newTopScore\n      });\n    };\n\n    this.handleIncorrectGuess = data => {\n      this.setState({\n        data: this.resetData(data),\n        score: 0\n      });\n    };\n\n    this.handleItemClick = id => {\n      let guessedCorrectly = false;\n      console.log('hi');\n      const newData = this.state.friends.map(item => {\n        const newItem = _objectSpread({}, item);\n\n        if (newItem.id === id) {\n          if (!newItem.clicked) {\n            newItem.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n\n        return newItem;\n      });\n      guessedCorrectly ? this.handleCorrectGuess(newData) : this.handleIncorrectGuess(newData);\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      friends: this.shuffleData(this.state.friends)\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      score: this.state.sc,\n      topScore: this.state.topScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Click Game\"), React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, this.state.friends.map((friend, i) => React.createElement(GameCard, {\n      key: i,\n      id: friend.id,\n      image: friend.image,\n      handleClick: this.handleItemClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/arianamelis 1/Desktop/2019code/CLICKMEMORYREACTGAME/00clicky/src/components/game/game.js"],"names":["React","Component","friends","GameCard","Wrapper","ClickItem","Title","Header","Navbar","Game","state","score","topScore","shuffleData","data","i","length","j","Math","floor","random","temp","resetData","map","item","clicked","handleCorrectGuess","newData","newScore","newTopScore","max","setState","handleIncorrectGuess","handleItemClick","id","guessedCorrectly","console","log","newItem","componentDidMount","render","sc","friend","image"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AACA,MAAMC,IAAN,SAAmBR,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAC3BS,KAD2B,GACnB;AACNR,MAAAA,OAAO,EAAEA,OADH;AAENS,MAAAA,KAAK,EAAC,CAFA;AAGNC,MAAAA,QAAQ,EAAC;AAHH,KADmB;;AAAA,SAU3BC,WAV2B,GAUbC,IAAI,IAAI;AACpB,UAAIC,CAAC,GAAGD,IAAI,CAACE,MAAL,GAAc,CAAtB;;AACA,aAAOD,CAAC,GAAG,CAAX,EAAc;AACZ,cAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAV;AACA,cAAMM,IAAI,GAAGP,IAAI,CAACC,CAAD,CAAjB;AACAD,QAAAA,IAAI,CAACC,CAAD,CAAJ,GAAUD,IAAI,CAACG,CAAD,CAAd;AACAH,QAAAA,IAAI,CAACG,CAAD,CAAJ,GAAUI,IAAV;AACAN,QAAAA,CAAC;AACF;;AACD,aAAOD,IAAP;AACD,KApB0B;;AAAA,SAqB3BQ,SArB2B,GAqBfR,IAAI,IAAI;AAClB,YAAMQ,SAAS,GAAGR,IAAI,CAACS,GAAL,CAASC,IAAI,sBAAUA,IAAV;AAAgBC,QAAAA,OAAO,EAAE;AAAzB,QAAb,CAAlB;AACA,aAAO,KAAKZ,WAAL,CAAiBS,SAAjB,CAAP;AACD,KAxB0B;;AAAA,SAyB3BI,kBAzB2B,GAyBNC,OAAO,IAAI;AAAA,0BACF,KAAKjB,KADH;AAAA,YACtBE,QADsB,eACtBA,QADsB;AAAA,YACZD,KADY,eACZA,KADY;AAE9B,YAAMiB,QAAQ,GAAGjB,KAAK,GAAG,CAAzB;AACA,YAAMkB,WAAW,GAAGX,IAAI,CAACY,GAAL,CAASF,QAAT,EAAmBhB,QAAnB,CAApB;AAEA,WAAKmB,QAAL,CAAc;AACZ7B,QAAAA,OAAO,EAAE,KAAKW,WAAL,CAAiBc,OAAjB,CADG;AAEZhB,QAAAA,KAAK,EAAEiB,QAFK;AAGZhB,QAAAA,QAAQ,EAAEiB;AAHE,OAAd;AAKD,KAnC0B;;AAAA,SAqC3BG,oBArC2B,GAqCJlB,IAAI,IAAI;AAC7B,WAAKiB,QAAL,CAAc;AACZjB,QAAAA,IAAI,EAAE,KAAKQ,SAAL,CAAeR,IAAf,CADM;AAEZH,QAAAA,KAAK,EAAE;AAFK,OAAd;AAID,KA1C0B;;AAAA,SA4C3BsB,eA5C2B,GA4CTC,EAAE,IAAI;AACtB,UAAIC,gBAAgB,GAAG,KAAvB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,YAAMV,OAAO,GAAG,KAAKjB,KAAL,CAAWR,OAAX,CAAmBqB,GAAnB,CAAuBC,IAAI,IAAI;AAC7C,cAAMc,OAAO,qBAAQd,IAAR,CAAb;;AACA,YAAIc,OAAO,CAACJ,EAAR,KAAeA,EAAnB,EAAuB;AACrB,cAAI,CAACI,OAAO,CAACb,OAAb,EAAsB;AACpBa,YAAAA,OAAO,CAACb,OAAR,GAAkB,IAAlB;AACAU,YAAAA,gBAAgB,GAAG,IAAnB;AACD;AACF;;AACD,eAAOG,OAAP;AACD,OATe,CAAhB;AAWAH,MAAAA,gBAAgB,GACZ,KAAKT,kBAAL,CAAwBC,OAAxB,CADY,GAEZ,KAAKK,oBAAL,CAA0BL,OAA1B,CAFJ;AAGD,KA7D0B;AAAA;;AAO3BY,EAAAA,iBAAiB,GAAG;AAClB,SAAKR,QAAL,CAAc;AAAE7B,MAAAA,OAAO,EAAE,KAAKW,WAAL,CAAiB,KAAKH,KAAL,CAAWR,OAA5B;AAAX,KAAd;AACD;;AAsDDsC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,KAAK9B,KAAL,CAAW+B,EAA1B;AAA8B,MAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWE,QAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,EAIE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKF,KAAL,CAAWR,OAAX,CAAmBqB,GAAnB,CAAuB,CAACmB,MAAD,EAAQ3B,CAAR,KACxB,oBAAC,QAAD;AACE,MAAA,GAAG,EAAEA,CADP;AAEE,MAAA,EAAE,EAAE2B,MAAM,CAACR,EAFb;AAGE,MAAA,KAAK,EAAEQ,MAAM,CAACC,KAHhB;AAIE,MAAA,WAAW,EAAE,KAAKV,eAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADC,CADD,CAJF,CADF;AAkBD;;AAlF0B;;AAuF7B,eAAexB,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport friends from \"../friends.json\";\nimport GameCard from \"../GameCard.js\";\nimport Wrapper from \"../Wrapper.js\";\nimport ClickItem from \"../ClickItem\";\nimport Title from \"../Title.js\";\nimport Header from \"../Header.js\";\nimport Navbar from \"../Navbar.js\";\nclass Game extends Component {\n  state = {\n    friends: friends,\n    score:0,\n    topScore:0\n  };\n\n  componentDidMount() {\n    this.setState({ friends: this.shuffleData(this.state.friends) });\n  }\n  shuffleData = data => {\n    let i = data.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = data[i];\n      data[i] = data[j];\n      data[j] = temp;\n      i--;\n    }\n    return data;\n  };\n  resetData = data => {\n    const resetData = data.map(item => ({ ...item, clicked: false }));\n    return this.shuffleData(resetData);\n  };\n  handleCorrectGuess = newData => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n\n    this.setState({\n      friends: this.shuffleData(newData),\n      score: newScore,\n      topScore: newTopScore\n    });\n  };\n\n  handleIncorrectGuess = data => {\n    this.setState({\n      data: this.resetData(data),\n      score: 0\n    });\n  };\n\n  handleItemClick = id => {\n    let guessedCorrectly = false;\n    console.log('hi');\n    const newData = this.state.friends.map(item => {\n      const newItem = { ...item };\n      if (newItem.id === id) {\n        if (!newItem.clicked) {\n          newItem.clicked = true;\n          guessedCorrectly = true;\n        }\n      }\n      return newItem;\n    });\n\n    guessedCorrectly\n      ? this.handleCorrectGuess(newData)\n      : this.handleIncorrectGuess(newData);\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar score={this.state.sc} topScore={this.state.topScore} />\n        <Header />\n        <Title>Click Game</Title>\n        <Wrapper>\n        {this.state.friends.map((friend,i) => (\n        <GameCard\n          key={i}\n          id={friend.id}\n          image={friend.image}\n          handleClick={this.handleItemClick}\n          />\n          ))}\n        </Wrapper>\n       \n      </div>\n    );\n  }\n}\n\n\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}